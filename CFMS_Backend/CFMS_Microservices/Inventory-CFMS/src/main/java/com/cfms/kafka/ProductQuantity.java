/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cfms.kafka;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ProductQuantity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1059953357974539568L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductQuantity\",\"namespace\":\"com.cfms.kafka\",\"fields\":[{\"name\":\"transportationType\",\"type\":[\"null\",\"string\"]},{\"name\":\"productName\",\"type\":[\"null\",\"string\"]},{\"name\":\"quantity\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProductQuantity> ENCODER =
      new BinaryMessageEncoder<ProductQuantity>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductQuantity> DECODER =
      new BinaryMessageDecoder<ProductQuantity>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ProductQuantity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ProductQuantity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProductQuantity>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ProductQuantity to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ProductQuantity from a ByteBuffer. */
  public static ProductQuantity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence transportationType;
  @Deprecated public java.lang.CharSequence productName;
  @Deprecated public int quantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductQuantity() {}

  /**
   * All-args constructor.
   * @param transportationType The new value for transportationType
   * @param productName The new value for productName
   * @param quantity The new value for quantity
   */
  public ProductQuantity(java.lang.CharSequence transportationType, java.lang.CharSequence productName, java.lang.Integer quantity) {
    this.transportationType = transportationType;
    this.productName = productName;
    this.quantity = quantity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transportationType;
    case 1: return productName;
    case 2: return quantity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transportationType = (java.lang.CharSequence)value$; break;
    case 1: productName = (java.lang.CharSequence)value$; break;
    case 2: quantity = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transportationType' field.
   * @return The value of the 'transportationType' field.
   */
  public java.lang.CharSequence getTransportationType() {
    return transportationType;
  }

  /**
   * Sets the value of the 'transportationType' field.
   * @param value the value to set.
   */
  public void setTransportationType(java.lang.CharSequence value) {
    this.transportationType = value;
  }

  /**
   * Gets the value of the 'productName' field.
   * @return The value of the 'productName' field.
   */
  public java.lang.CharSequence getProductName() {
    return productName;
  }

  /**
   * Sets the value of the 'productName' field.
   * @param value the value to set.
   */
  public void setProductName(java.lang.CharSequence value) {
    this.productName = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.Integer getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Integer value) {
    this.quantity = value;
  }

  /**
   * Creates a new ProductQuantity RecordBuilder.
   * @return A new ProductQuantity RecordBuilder
   */
  public static com.cfms.kafka.ProductQuantity.Builder newBuilder() {
    return new com.cfms.kafka.ProductQuantity.Builder();
  }

  /**
   * Creates a new ProductQuantity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductQuantity RecordBuilder
   */
  public static com.cfms.kafka.ProductQuantity.Builder newBuilder(com.cfms.kafka.ProductQuantity.Builder other) {
    return new com.cfms.kafka.ProductQuantity.Builder(other);
  }

  /**
   * Creates a new ProductQuantity RecordBuilder by copying an existing ProductQuantity instance.
   * @param other The existing instance to copy.
   * @return A new ProductQuantity RecordBuilder
   */
  public static com.cfms.kafka.ProductQuantity.Builder newBuilder(com.cfms.kafka.ProductQuantity other) {
    return new com.cfms.kafka.ProductQuantity.Builder(other);
  }

  /**
   * RecordBuilder for ProductQuantity instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductQuantity>
    implements org.apache.avro.data.RecordBuilder<ProductQuantity> {

    private java.lang.CharSequence transportationType;
    private java.lang.CharSequence productName;
    private int quantity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cfms.kafka.ProductQuantity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transportationType)) {
        this.transportationType = data().deepCopy(fields()[0].schema(), other.transportationType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productName)) {
        this.productName = data().deepCopy(fields()[1].schema(), other.productName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.quantity)) {
        this.quantity = data().deepCopy(fields()[2].schema(), other.quantity);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ProductQuantity instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cfms.kafka.ProductQuantity other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.transportationType)) {
        this.transportationType = data().deepCopy(fields()[0].schema(), other.transportationType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productName)) {
        this.productName = data().deepCopy(fields()[1].schema(), other.productName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.quantity)) {
        this.quantity = data().deepCopy(fields()[2].schema(), other.quantity);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'transportationType' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransportationType() {
      return transportationType;
    }

    /**
      * Sets the value of the 'transportationType' field.
      * @param value The value of 'transportationType'.
      * @return This builder.
      */
    public com.cfms.kafka.ProductQuantity.Builder setTransportationType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transportationType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transportationType' field has been set.
      * @return True if the 'transportationType' field has been set, false otherwise.
      */
    public boolean hasTransportationType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transportationType' field.
      * @return This builder.
      */
    public com.cfms.kafka.ProductQuantity.Builder clearTransportationType() {
      transportationType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductName() {
      return productName;
    }

    /**
      * Sets the value of the 'productName' field.
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public com.cfms.kafka.ProductQuantity.Builder setProductName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.productName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productName' field.
      * @return This builder.
      */
    public com.cfms.kafka.ProductQuantity.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.Integer getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.cfms.kafka.ProductQuantity.Builder setQuantity(int value) {
      validate(fields()[2], value);
      this.quantity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.cfms.kafka.ProductQuantity.Builder clearQuantity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductQuantity build() {
      try {
        ProductQuantity record = new ProductQuantity();
        record.transportationType = fieldSetFlags()[0] ? this.transportationType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.productName = fieldSetFlags()[1] ? this.productName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.quantity = fieldSetFlags()[2] ? this.quantity : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductQuantity>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductQuantity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductQuantity>
    READER$ = (org.apache.avro.io.DatumReader<ProductQuantity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
